---
# Config options.
# The actual scheme is defined in validate.validate_config_schema()
# But this example config file demonstrates all possible options.
#
# An UPPERCASE key means that you can define your own custom key.
# E.g. instead of
#
# tables_config:
#   TABLE_NAME_01:
#
# you might have:
#   orders:
#
# Note that you don't actually have to use uppercase.
#
# NONE_OR_STR means that you can either provide a string or leave this blank.
#
# Strings are shown here in uppercase to emphasize that you will enter
# your own data.
#
# Pay special attention to which keys need to be in *lists*. Even if you
# only have one item in the list, it still needs to start wiht a hyphen
# and be in a list.
#
# Example: you only want to create one table.
#
# This is CORRECT:
#
# create_tables:
#   - orders
#
# This is WRONG (no hyphen):
#
# create_tables:
#   orders    # WRONG!
#
# By contrast, when you define this table in tables_config, it would NOT
# be in a list:
#
# tables_config:
#   orders:
#
# Similarly, let's say orders only has one path. This is CORRECT:
#
# tables_config:
#   orders:
#     - path: "orders.csv"
#
# This is WRONG:
#
# tables_config:
#   orders:
#     path: "orders.csv"    # WRONG!
#
# Why do we need a list here? So that you have the option to include
# more than one path. YAML cannot have duplicate keys at the same level.
#
# You could NOT do:
#
# tables_config:
#   orders:
#     path: "orders_US.csv"  # WRONG!
#     path: "orders_CA.csv"  # WRONG!
#
# because then, what is orders.path? You have two conflicting options.
#
# Instead, we use a list:
#
# tables_config:
#   orders:
#     - path: "orders_US.csv"
#     - path: "orders_CA.csv"
#
# Now, we have orders[0].path and orders[1].path.
#
# However, *within* each list item, we do NOT need a list. Let's say
# our Canadian orders path actually needs more configuration:
#
# tables_config:
#   orders:
#     - path: "orders_US.csv"
#     - path: "orders_CA.csv"
#       pivot:
#         index: order_id
#         columns: meta_key
#         values: meta_value
#
# Why doesn't pivot have a hyphen? Because it's still part of *this* path;
# it's describing how to handle orders_CA.csv. And there can only be one
# pivot value for *this* path.
#
# Similarly, within pivot, we have three keys: index, columns, and values.
# These aren't in a list, because they all are describing this value of pivot.
#
# If you think of each list item as a separate item, it will make more sense.
# Inside a table, each item is a separate data source. It will have at least
# a path, but it may also have other options.
#
# It helps to note that the order of KEYS within the list does not matter.
# You could put pivot first, it doesn't matter:
#
# tables_config:
#   orders:
#     - path: "orders_US.csv"
#     - pivot:
#         index: order_id
#         columns: meta_key
#         values: meta_value
#       path: "orders_CA.csv"
#
# Or you could change the order of keys within pivot:
#
# tables_config:
#   orders:
#     - path: "orders_US.csv"
#     - pivot:
#         values: meta_value
#         columns: meta_key
#         index: order_id
#       path: "orders_CA.csv"
#
# In practice, it's probably best to use a consistent order. But for keys,
# order doesn't matter.
#
# However, the order of LIST items DOES matter. When you define your queries,
# each query is a separate list item, and the queries will run in the order
# you define them.
include:
  - path: "INCLUDE_PATH_O1.yaml"
  - path: "INCLUDE_PATH_02.yaml"
tables_config:
  TABLE_NAME_01:
    - path: "TABLE_01_PATH_01.csv"
  TABLE_NAME_02:
    - path: "TABLE_02_PATH_01.csv"
    - path: "TABLE_02_PATH_02.xlsx"
      sheet: "SHEET NAME"
      datetime:
        FIELD_01: NONE_OR_STR
        FIELD_02: NONE_OR_STR
      pivot:
        index: FIELD_ID
        columns: FIELD_KEY
        values: FIELD_VALUE
create_tables:
  # If no create_tables is provided, all tables in tables_config are created.
  # Here, we want to create both tables we've defined, as well as tables from our include files.
  - TABLE_NAME_01
  - TABLE_NAME_02
  - INCLUDED_TABLE_03
  - INCLUDED_TABLE_05
output:
  dir: "PATH"
  basename: "BASENAME"
  export_queries: xlsx | csv
  export_tables: xlsx | csv
  append_date: true
  prepend_date: false
  styles:
    column_width: 15
import_module:
  - module: "MODULE_NAME_01"
  - module: "MODULE_NAME_02"
import:
  strip: true
  slugify_columns: true
  lowercase_columns: true
  uppercase_rows: true
queries:
  - sheet: "SHEET NAME 01"
    # YAML has multiple ways to write multiline strings.
    # With |, you must end the string with a blank line.
    sql: |
      SELECT * FROM
      ...
      ;

  - sheet: "SHEET NAME 02"
    datetime: true
    df_postprocess: FUNCTION_NAME
    replace:
      COLUMN_NAME:
        FIELD_MATCH: FIELD_REPLACE
    sql: |
      SELECT * FROM
      ...
      ;
